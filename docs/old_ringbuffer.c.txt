//#include <stdarg.h> /* Needed for the definition of va_list */
//#include <stdlib.h>
//#include <stdint.h>
//#include <stdio.h>
//#include <string.h>

//#include <unistd.h>

//#include <sys/uio.h>

//#include <fcntl.h>

//#include <sys/mman.h>
//#include <sys/types.h>
//#include <sys/stat.h>
//#include <errno.h>

//#include <sys/socket.h>
//#include <xmmintrin.h>

#include <stdlib.h>
#include <stdint.h>
#include <assert.h>

//#include <liburcu.h>
//#include <trace/events/rcu.h>

#include "ringbuffer.h"
//#include "util.h"

struct rb_barrier {
	uint64_t		seq_num;		/** < Index of the last entry released for consumption */
};

struct rb_buffer {
	//rb_barrier *	insert_barrier;
	uint64_t		seq_num;		/** < Index of the last entry released for consumption */
	uint64_t		write_slot;		/** < Index of the next available production slot */
	uint64_t		write_barrier;  /** < Index of the last entry released for production */
	uint64_t		size_mask;		/** < Buffer size - 1; Used to maintain scope of buffer */
	void *			data_buffer;
};

/*
void synchronize_kernel(void);

void call_rcu(struct rcu_head *head,
              void (*func)(void *arg),
              void *arg);

struct rcu_head {
        struct list_head list;
        void (*func)(void *obj);
        void *arg;
};

void rcu_read_lock(void);

void rcu_read_unlock(void);

https://kernel.googlesource.com/pub/scm/linux/kernel/git/rostedt/linux-trace/+/ftrace/rcu-2/kernel/rcutree.c

#424 - rcu_idle_enter


*/

int rb_init_buffer(rb_buffer** buffer_ptr, uint8_t buffer_size, uint8_t data_size) {
	*buffer_ptr = malloc(sizeof(rb_buffer));
	(*buffer_ptr)->seq_num = 10;
	return 0;
}

int rb_release_buffer(rb_buffer * buffer) {
	DebugPrint("Released Buffer: %d", buffer->seq_num);
	free(buffer);
}

int rb_claim(void * batch, char count) {
	// Try update write slot (atomic)
	// Return the batch - address, count, etc struct
	return 0;
}

int rb_publish(uint64_t position, char count) {

	return 0;
}

int rb_update_seq_num(rb_buffer * buffer, uint64_t value) {
	// Set seq num
	// Notify readers if applicable
}

int rb_update_write_barrier(rb_buffer * buffer, uint64_t value) {
	// Set write barrier
	// Notify writers if applicable
}

int rb_try_update_write_slot(rb_buffer * buffer, uint64_t value) {
	// Needs to be done atomically
	// Checks for room between slot and barrier
	// If no room is found do we (a) block or (b) return fail? Flag?
}
